     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ; E = 1 / a + 200 * b - c / (d + 1) + e; a,b-word; c,d-byte; e-doubleword;
    15                                      ; E = 1 / 1 + 200 * 1 - 2 / (1 + 1) + 1 = 201
    16 00000000 0100                        a dw 1
    17 00000002 0100                        b dw 1
    18 00000004 02                          c db 2
    19 00000005 01                          d db 1
    20 00000006 01000000                    e dd 1
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26                                          ; 1 / a, words
    27 00000000 66B80100                        mov ax, 1 ; ax = 1
    28 00000004 668B1D[00000000]                mov bx, [a] ; bx = a
    29                                          ; ax in dx:ax
    30 0000000B 6699                            cwd ; dx:ax = ax
    31 0000000D 66F7F3                          div bx ; ax = dx:ax / bx
    32                                          
    33                                          ; make ax in ebx
    34 00000010 0FB7D8                          movzx ebx, ax ; ebx = ax
    35                                  
    36                                          ; 200 * b, words
    37 00000013 66A1[02000000]                  mov ax, [b] ; ax = b
    38 00000019 66BBC800                        mov bx, 200 ; bx = 200
    39 0000001D 66F7E3                          mul bx ; dx:ax = ax * bx
    40                                  
    41                                          ; make dx:ax in eax
    42 00000020 6652                            push dx ; push dx onto the stack
    43 00000022 6650                            push ax ; push ax onto the stack
    44 00000024 58                              pop eax ; pop ax off the stack
    45                                  
    46                                          ; c / (d + 1), bytes
    47 00000025 66A1[04000000]                  mov ax, [c] ; ax = c
    48 0000002B 8A1D[05000000]                  mov bl, [d] ; bl = d
    49 00000031 FEC3                            inc bl ; bl = bl + 1
    50 00000033 F6F3                            div bl ; al = ax / bl
    51                                  
    52                                          ; move al in ecx
    53 00000035 0FB6C8                          movzx ecx, al ; ecx = al
    54                                  
    55                                          ; ebx + eax - ecx + e, doublewords
    56 00000038 8B15[06000000]                  mov edx, [e] ; edx = e
    57 0000003E 01C3                            add ebx, eax ; ebx = ebx + eax
    58 00000040 29CB                            sub ebx, ecx ; ebx = ebx - ecx
    59 00000042 01D3                            add ebx, edx ; ebx = ebx + edx
    60                                          ; ebx is the result
    61                                  
    62                                  
    63                                      
    64                                          ; exit(0)
    65 00000044 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 00000046 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
