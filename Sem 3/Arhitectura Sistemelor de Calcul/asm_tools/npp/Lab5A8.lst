     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;A string of bytes A is given. Construct string B containing only odd values from string A.
    15                                      ;If A = 17, 4, 2, -2, -1 => B = 17, -1
    16                                  
    17 00000000 110402FEFF                  A db 17, 4, 2, -2, -1
    18                                      ls equ $ - A
    19                                     
    20 00000005 <res 00000005>              B resb ls
    21                                         
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 BE00000000                   mov esi, 0
    27 00000005 BF00000000                  mov edi, 0
    28 0000000A B905000000                  mov ecx, ls
    29 0000000F B302                        mov bl, 2 
    30                                          ; ...
    31                                          repeta:
    32 00000011 660FBE86[00000000]                  movsx ax, byte [A + esi] ; ax = A[esi]
    33 00000019 F6FB                                idiv bl ; ax = ax / bl ; al = ax % bl
    34 0000001B 3C01                                cmp al, 1 ; al == 1
    35 0000001D 7402                                je odd ; if al == 1 jump to odd
    36 0000001F EB0D                                jmp end
    37                                          odd:
    38 00000021 8A86[00000000]                      mov al, [A+esi]
    39 00000027 8887[05000000]                      mov byte [B + edi], al ; B[edi] = al
    40 0000002D 47                                  inc edi ; edi++
    41                                          end:
    42 0000002E 46                               inc esi ; esi++
    43 0000002F E2E0                             loop repeta
    44                                          ; ...
    45                                          ; exit(0)
    46 00000031 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 00000033 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
